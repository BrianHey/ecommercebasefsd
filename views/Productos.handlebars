<div class="p-5">

    {{> Productos/Form }}

    {{> Productos/Table}}

    {{> Productos/Modal}}

</div>

<script>

    let productId;

    let sizes = JSON.parse('{{{sizesData}}}');
    let categories = JSON.parse('{{{categoriesData}}}');
    let colors = JSON.parse('{{{colorsData}}}');
    let genders = JSON.parse('{{{gendersData}}}');

    let categoriesNames;
    categoriesNames = categories.map(c => c.name)



    $("form").submit((e) => {
        e.preventDefault()
        const parent = e.target.parentElement
        const method = parent.className == "modal-body" ? "put" : "post"
        validationCreateOrUpdate(e.target, method)
    })




    const validationCreateOrUpdate = async (form, method) => {


        const camposLengt = form.getElementsByTagName("label").length
        let elements = Array.from(form).map(i => i.type == "text" || i.type == "number" || i.type == "select-one" ? i.value : i.type == "file" ? i.files : i.type == "radio" && i.checked ? i.value : false)
        elements = elements.filter(i => i)
        let length_Final = elements.length
        let [model, stock, price, image, category, description, size, gender, color] = elements

        image = image[0]

        let validate = true

        length_Final < camposLengt ? (alert("Te falta poner algo mi bro"), validate = false)
            : stock < 0 || price < 0 ? (alert("El stock y el precio deben ser solo números positivos"), validate = false)
                : image && image.size > 5000000 || image && image.type.split("/")[0] !== "image" ? method !== "put" && image ? (alert("El archivo debe ser una imagen de máximo 5MB"), validate = false)
                    : !categoriesNames.includes(category) || !sizes.includes(size) || !colors.includes(color) || !genders.includes(gender) ? (alert("Alerta de hack"), validate = false) : false : false

        category = categories.find(c => c.name == category).id

        let formDataImage = new FormData()
        formDataImage.append("image", image)
        if (validate) {

            console.log(form)
            const urlImage = image ? (await axios.post("/files", formDataImage)).data : $(".modal-body #preview").attr("src").substr(1)

            await axios[method](`http://localhost:3000/productos${method == "put" ? `/${productId}` : ''}`,

                [stock, price, urlImage, category, description, size, gender, color, model]
            )

            productId = null
        }
        location.reload()
    }



    $('input[type="file"]').change(e => {
        const file = e.target.files[0]
        const reader = new FileReader()
        const preview = e.target.parentElement.getElementsByTagName("img")[0]
        reader.onloadend = () => preview.setAttribute("src", reader.result)
        reader.readAsDataURL(file)
    })


</script>